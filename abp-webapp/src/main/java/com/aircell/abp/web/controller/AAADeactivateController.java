package com.aircell.abp.web.controller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.validation.BindException;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.View;
import org.springframework.web.servlet.view.RedirectView;

import com.aircell.abp.backchannel.AbpBackChannelClient;
import com.aircell.abp.backchannel.BackChannelUtils;
import com.aircell.abp.model.AirPassenger;
import com.aircell.abp.utils.AircellServletUtils;

/**.
 * The <code>AAADeactivateController</code> controller is used to deactivate the
 * session on the AAA service.
 * @author Oscar.Diaz
 */
public class AAADeactivateController extends ABPAbstractCommandController {

    private final Logger logger = LoggerFactory.getLogger(getClass());
    private String notAuthenticatedForwardPage;

    private String sslCertStorePath;

    /**.
     * Method to end the timer on the ATG session
     * @param p - Passenger for whom the session is being closed
     * @param request - the submitted request
     * @param response - the response to send
     * @param errors - any errors generated by the submission
     * @throws IllegalStateException
     */
    public void endATGSession(
    final AirPassenger passenger, final HttpServletRequest request,
    final HttpServletResponse response, final BindException errors
    ) throws IllegalStateException {

        if (passenger.getSession().isActivated()) {
            passenger.endATGSession();
        }
    }

    public String getNotAuthForward() {
        return notAuthenticatedForwardPage;
    }

    public String getSslCertStorePath() {
        return sslCertStorePath;
    }

    @Override
    public ModelAndView handler(
    HttpServletRequest req, HttpServletResponse res, Object command,
    BindException errors
    ) {

        ModelAndView mv;
        String sessionId = req.getParameter(BackChannelUtils.GBP_SESSION_ID);
        String abpUserIP = AircellServletUtils.getIpAddress(req);
        boolean bATGSessionEnded = false;

        try {
            AirPassenger passenger = new AirPassenger();
            passenger.endATGSession(abpUserIP);
            mv = createSuccessModelAndView(req);
            bATGSessionEnded = true;
        } catch (Exception e) {
            logger.error("AAAActivateController.handler"
            + "Exception occured while deactivating the ATG session for IP : "
            + abpUserIP, e
            );
            mv = createFailureModelAndView(req);
        }


        try {
            if (bATGSessionEnded) {
                AbpBackChannelClient client =
                new AbpBackChannelClient(this.getHttpClientGbpPage());

                // Create back channel cookie
                client.setCookieName(this.getHttpPostCookieName());
                client.setCookieValue(sessionId);
                client.setCookieMaxAge(this.getCookieMaxAge());
                client.setCookieSecure(this.isCookieSecure());
                client.setCookieHttpDomain(this.getHttpPostDomain());
                client.setCookieHttpPath(this.getHttpPath());

                // Retrive user via secure communication link
                String userSt = client.getAircellUserStringPostMethod(
                abpUserIP, this.getParamName(), this.getMethodName(),
                sslCertStorePath
                );
            }
        } catch (Exception e) {
            logger.error("AAAActivateController.handler"
            + "Error: Connection to the ground was unsuccessful for IP : "
            + abpUserIP + "\nDetails: " + e.getMessage(), e
            );
        }

        return mv;
    }

    public void setNotAuthForward(final String st) {
        this.notAuthenticatedForwardPage = st;
    }

    public void setSslCertStorePath(final String st) {
        this.sslCertStorePath = st;
    }

    /**.
     * @see com.aircell.abp.web.controller.AircellCommandController#
     * createFailureModelAndView(javax.servlet.http.HttpServletRequest,
     *      java.util.Map)
     */
    @Override
    protected ModelAndView createFailureModelAndView(
    HttpServletRequest request, Map model
    ) {
        ModelAndView mv = super.createFailureModelAndView(request, model);
        if (isMobile(request)) {
            View redirectView = new RedirectView(mv.getViewName());
            mv.setView(redirectView);
        }
        return mv;
    }
}
